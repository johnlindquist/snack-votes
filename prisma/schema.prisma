// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Poll {
  id        Int      @id @default(autoincrement())
  title     String
  isActive  Boolean  @default(false)
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  pairs     Pair[]   // Keeping this relation for backward compatibility during migration
  voters    Voter[]
  groups    Group[]  // New relation: A poll has many groups
}

model Group {
  id        Int      @id @default(autoincrement())
  title     String
  pollId    Int
  poll      Poll     @relation(fields: [pollId], references: [id])
  pairs     Pair[]   // A group has many pairs
}

model Pair {
  id       Int      @id @default(autoincrement())
  optionA  String
  optionB  String
  
  pollId   Int
  poll     Poll     @relation(fields: [pollId], references: [id])
  
  groupId  Int?     // Optional during migration
  group    Group?   @relation(fields: [groupId], references: [id])
  
  votes    Vote[]
}

model Voter {
  id         Int      @id @default(autoincrement())
  name       String   // Voter's name
  identifier String   // e.g. could be an email, IP, or a cookie value
  
  pollId     Int
  poll       Poll     @relation(fields: [pollId], references: [id])
  
  votes      Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  selection String   // Stores the selected option â€“ store as a string that matches optionA or optionB
  pairId    Int
  voterId   Int
  createdAt DateTime @default(now())
  
  pair    Pair    @relation(fields: [pairId], references: [id])
  voter   Voter   @relation(fields: [voterId], references: [id], onDelete: Cascade)
}
